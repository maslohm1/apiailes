<?php

namespace BP\AilesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PartenaireailesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PartenaireailesRepository extends EntityRepository
{
     public function cashback($rib){
        
        $sql = "SELECT t.`CODE TRANSACTION`as code , t.montant, t.commerce, ((t.montant * p.remise)/100) AS cashback FROM  `Transaction` t LEFT JOIN PartenaireAiles p ON p.nom = t.commerce WHERE t.RIBS = $rib LIMIT 0,30";
        
        return $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();
     
        
    }
    
    public function cashback2($rib,$month,$year){
        $day1='01';
        $day2='31';
        $sql = "SELECT t.`CODE TRANSACTION` AS code, t.montant, SUBSTR( t.commerce, 1, 18 ) AS commerce , (
(
t.montant * r.remise
) /100
) AS cashback
FROM remises r,  `Transaction` t
LEFT JOIN PartenaireAiles p ON p.nom = t.commerce
WHERE p.id = r.id_partenaire
AND t.RIBS = $rib
AND t.montant
BETWEEN r.min_montant
AND r.max_montant
AND SUBSTR(  `DATE ET HEURE` , 1, 8 ) 
BETWEEN  $year$month$day1
AND  $year$month$day2 ;" ;
        
        return $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();
     
        
    }
    
    public function allcashback($rib,$year){
        
        $sql = "SELECT t.`CODE TRANSACTION` AS code, t.montant, SUBSTR( t.commerce, 1, 18 ) AS commerce , (
(
t.montant * r.remise
) /100
) AS cashback
FROM remises r,  `Transaction` t
LEFT JOIN PartenaireAiles p ON p.nom = t.commerce
WHERE p.id = r.id_partenaire
AND t.RIBS = $rib
AND t.montant
BETWEEN r.min_montant
AND r.max_montant
AND SUBSTR(  `DATE ET HEURE` , 1, 4 ) = $year  ;" ;
        
        return $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();
     
        
    }
    
}
